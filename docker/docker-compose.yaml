version: "3"

services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "6831:6831/udp" # Jaeger agent UDP port (for Thrift compact protocol)
      - "6832:6832/udp" # Jaeger agent UDP port (for Thrift binary protocol)
      - "5778:5778"     # Jaeger agent HTTP endpoint (for configuration)
      - "4317:4317"     # Jaeger gRPS HTTP collector
      - "4318:4318"     # Jaeger gRPS HTTP collector (encrypted)
      - "14250:14250"     # Jaeger gRPS tracing
      - "14268:14268"     # Jaeger gRPS HTTP internal service communication
      - "14269:14269"     # Jaeger gRPS HTTP internal service communication (encrypted)
      - "9411:9411"     # Collector zipkin

    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - jaeger-network

  # got from https://habr.com/ru/articles/823816/
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: rustplayground
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic my-topic-1 --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic my-topic-2 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - 22181:2181
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - 9092:9092
#    hostname: kafka
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

#  kafka2:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - 29093:29092
#    hostname: kafka2
#    environment:
#      KAFKA_BROKER_ID: 2
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2

#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    ports:
#      - 8090:8080
#    restart: always
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
##      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092,kafka2:29093
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#    links:
#      - kafka
##      - kafka2
#      - zookeeper

volumes:
  pgdata:
    driver: local

networks:
  jaeger-network:
    driver: bridge
  kafka-net:
    driver: bridge